<?php
/** class-lus.php
 * The core plugin class.
 *
 * This is used to define internationalization, admin-specific hooks,
 * and public-facing site hooks.
 *
 * @package    LUS
 * @subpackage LUS/includes
 */

class LUS {
    /**
     * The loader that's responsible for maintaining and registering all hooks.
     * @var LUS_Loader
     */
    protected $loader;

    /**
     * The unique identifier of this plugin.
     * @var string
     */
    protected $plugin_name;

    /**
     * The current version of the plugin.
     * @var string
     */
    protected $version;

    /**
     * Database handler instance.
     * @var LUS_Database
     */
    protected $db;

    /**
     * Define the core functionality of the plugin.
     */
    public function __construct() {
        $this->plugin_name = 'lus';
        $this->version = LUS_VERSION;

        $this->load_dependencies();
        $this->set_locale();
        $this->define_admin_hooks();
        $this->define_public_hooks();
        $this->define_ajax_hooks();
    }

    /**
     * Load the required dependencies for this plugin.
     */
    private function load_dependencies() {
        // Core plugin dependencies
        require_once LUS_PLUGIN_DIR . 'includes/class-lus-loader.php';
        require_once LUS_PLUGIN_DIR . 'includes/class-lus-i18n.php';
        require_once LUS_PLUGIN_DIR . 'includes/class-lus-database.php';

        // Feature-specific classes
        require_once LUS_PLUGIN_DIR . 'includes/class-lus-recorder.php';
        require_once LUS_PLUGIN_DIR . 'includes/class-lus-evaluator.php';

        // Admin and public interfaces
        require_once LUS_PLUGIN_DIR . 'admin/class-lus-admin.php';
        require_once LUS_PLUGIN_DIR . 'public/class-lus-public.php';

        // Initialize main components
        $this->loader = new LUS_Loader();
        $this->db = new LUS_Database();
    }

    /**
     * Define the locale for internationalization.
     */
    private function set_locale() {
        $plugin_i18n = new LUS_i18n();
        $this->loader->add_action('plugins_loaded', $plugin_i18n, 'load_plugin_textdomain');
    }

    /**
     * Register all of the hooks related to the admin area.
     */
    private function define_admin_hooks() {
        $plugin_admin = new LUS_Admin($this->get_plugin_name(), $this->get_version(), $this->db);

        // Admin scripts and styles
        $this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_styles');
        $this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts');

        // Admin menu and settings
        $this->loader->add_action('admin_menu', $plugin_admin, 'add_menu_pages');
        $this->loader->add_action('admin_init', $plugin_admin, 'register_settings');

        // Plugin list page
        $this->loader->add_filter('plugin_action_links_' . LUS_PLUGIN_NAME, $plugin_admin, 'add_settings_link');
    }

    /**
     * Register all of the hooks related to the public-facing functionality.
     */
    private function define_public_hooks() {
        $plugin_public = new LUS_Public($this->get_plugin_name(), $this->get_version(), $this->db);

        // Public scripts and styles
        $this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_styles');
        $this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_scripts');

        // Register shortcodes
        $this->loader->add_action('init', $plugin_public, 'register_shortcodes');

        // User redirects and messages
        $this->loader->add_filter('login_redirect', $plugin_public, 'subscriber_login_redirect', 10, 3);
        $this->loader->add_action('wp_footer', $plugin_public, 'show_login_message');
    }

    /**
     * Register all AJAX handlers.
     */
    private function define_ajax_hooks() {
        // Admin AJAX handlers
        $admin_ajax_actions = [
            'get_passage',
            'get_passages',
            'delete_passage',
            'get_questions',
            'delete_question',
            'get_results',
            'delete_assignment',
            'save_assessment',
            'delete_recording',
            'save_interactions'
        ];

        $plugin_admin = new LUS_Admin($this->get_plugin_name(), $this->get_version(), $this->db);

        foreach ($admin_ajax_actions as $action) {
            $this->loader->add_action(
                'wp_ajax_lus_admin_' . $action,
                $plugin_admin,
                'ajax_' . $action
            );
        }

        // Public AJAX handlers
        $public_ajax_actions = [
            'get_questions',
            'save_recording',
            'submit_answers',
            'get_assessment'
        ];

        $plugin_public = new LUS_Public($this->get_plugin_name(), $this->get_version(), $this->db);

        foreach ($public_ajax_actions as $action) {
            // Logged in users
            $this->loader->add_action(
                'wp_ajax_lus_' . $action,
                $plugin_public,
                'ajax_' . $action
            );

            // Non-logged in users (if needed)
            if (in_array($action, ['get_questions'])) {
                $this->loader->add_action(
                    'wp_ajax_nopriv_lus_' . $action,
                    $plugin_public,
                    'ajax_' . $action
                );
            }
        }
    }

    /**
     * Run the loader to execute all the hooks with WordPress.
     */
    public function run() {
        $this->loader->run();
    }

    /**
     * The name of the plugin used to uniquely identify it.
     * @return string The name of the plugin.
     */
    public function get_plugin_name() {
        return $this->plugin_name;
    }

    /**
     * The reference to the class that orchestrates the hooks with the plugin.
     * @return LUS_Loader Orchestrates the hooks of the plugin.
     */
    public function get_loader() {
        return $this->loader;
    }

    /**
     * Retrieve the version number of the plugin.
     * @return string The version number of the plugin.
     */
    public function get_version() {
        return $this->version;
    }

    /**
     * Get the database handler instance.
     * @return LUS_Database The database handler instance.
     */
    public function get_db() {
        return $this->db;
    }
}